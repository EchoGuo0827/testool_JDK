package com.example.highplattest.systemversion;

import java.util.Arrays;
import android.annotation.SuppressLint;
import com.example.highplattest.fragment.UnitFragment;
import com.example.highplattest.main.constant.GlobalVariable;
import com.example.highplattest.main.constant.ParaEnum;
import com.example.highplattest.main.tools.CalDataLrc;
import com.example.highplattest.main.tools.Gui;
import com.example.highplattest.main.tools.ISOUtils;
import com.example.highplattest.main.tools.LoggerUtil;
import com.example.highplattest.main.tools.Tools;
import com.newland.k21controller.CommandInvokeResult;
import com.newland.k21controller.ControllerException;
import com.newland.k21controller.K21ControllerManager;
import com.newland.k21controller.K21DeviceCommand;
import com.newland.k21controller.K21DeviceResponse;
/************************************************************************
 * 
 * module 			: Android版本号获取模块
 * file name 		: SystemVersion5.java 
 * Author 			: zhengxq
 * version 			: 
 * DATE 			: 20161227
 * directory 		: 
 * description 		: 生产指令设置csn号，ksn号，只能使用旧连接测试
 * related document : 
 * history 		 	: author			date			remarks
 *			  		 zhengxq		   20161227 		created
 * 
 ************************************************************************ 
 * log : Revision no message(created for Android platform)
 ************************************************************************/
@SuppressLint("NewApi")
public class SystemVersion5 extends UnitFragment
{
	private final String TESTITEM = "设置和获取ksn及csn号";
	private String fileName=SystemVersion5.class.getSimpleName();
	private final byte[] ksn_1_num = {0x39};
	private final byte[] ksn_40_num = {
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,};
	
	private final byte[] ksn_80_num = {
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39};
	/*private final byte[] ksn_get_80_num = {0x01,0x23,0x45,0x67,(byte) 0x89,0x01,0x23,0x45,0x67,(byte) 0x89,
			0x01,0x23,0x45,0x67,(byte) 0x89,0x01,0x23,0x45,0x67,(byte) 0x89,
			0x01,0x23,0x45,0x67,(byte) 0x89,0x01,0x23,0x45,0x67,(byte) 0x89,
			0x01,0x23,0x45,0x67,(byte) 0x89,0x01,0x23,0x45,0x67,(byte) 0x89,};*/
	
	private final byte[] ksn_81_num = {
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30};
	
	private final byte[] ksn_1_xw = {0x41};
	private final byte[] ksn_80_xw = {
			0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,
			0x65,0x66,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,
			0x63,0x64,0x65,0x66,0x41,0x42,0x43,0x44,0x45,0x46,
			0x61,0x62,0x63,0x64,0x65,0x66,0x41,0x42,0x43,0x44,
			0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66,0x41,0x42,
			0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66,
			0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,
			0x65,0x66,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62
			};
	private final byte[] ksn_81_xw = {
			0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,
			0x65,0x66,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,
			0x63,0x64,0x65,0x66,0x41,0x42,0x43,0x44,0x45,0x46,
			0x61,0x62,0x63,0x64,0x65,0x66,0x41,0x42,0x43,0x44,
			0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66,0x41,0x42,
			0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66,
			0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,
			0x65,0x66,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,
			0x63};
	
	private final byte[] ksn_1_num_xw={0x30};
	
	private final byte[] ksn_80_num_xw = {
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,
			0x65,0x66,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,
			0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,
			0x63,0x64,0x65,0x66,0x30,0x31,0x32,0x33,0x34,0x35,
			0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,
			0x61,0x62,0x63,0x64,0x65,0x66,0x30,0x31,0x32,0x33,
			0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44
			};
	
	private final byte[] ksn_get_num_80 = {0x01,0x23,0x45,0x67,(byte) 0x89,(byte) 0xAB,(byte) 0xCD,(byte) 0xEF,(byte) 0xAB,
			(byte) 0xCD,(byte) 0xEF,0x01,0x23,0x45,0x67,(byte) 0x89,(byte) 0xAB,(byte) 0xCD,(byte) 0xEF,(byte) 0xAB,(byte) 0xCD,
			(byte) 0xEF,0x01,0x23,0x45,0x67,(byte) 0x89,(byte) 0xAB,(byte) 0xCD,(byte) 0xEF,
			(byte) 0xAB,(byte) 0xCD,(byte) 0xEF,0x01,0x23,0x45,0x67,(byte) 0x89,(byte) 0xAB,(byte) 0xCD};
	
	private final byte[] ksn_81_num_xw = {
			0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
			0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,
			0x65,0x66,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,
			0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,
			0x63,0x64,0x65,0x66,0x30,0x31,0x32,0x33,0x34,0x35,
			0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,
			0x61,0x62,0x63,0x64,0x65,0x66,0x30,0x31,0x32,0x33,
			0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,
			0x61
			};
	
	private final byte[] ksn_1_mix = {'q'};
	private final byte[] ksn_40_mix={
			'/','0','1','2','3','4','5','6','7','8',
			'9','a','b','c','d','e','f','g','2','3',
			'2','A','B','C','D','E','F','A','G','B',
//			'C','0','1','2','3','4','5','6','7','8',
			'9','0','1','2','3','4','5',0x60,'@',':'};
	
	private final byte[] ksn_41_mix = {
			'/','0','1','2','3','4','5','6','7','8',
			'9','a','b','c','d','e','f','g','2','3',
			'2','A','B','C','D','E','F','A','G','B',
//			'C','0','1','2','3','4','5','6','7','8',
			'9','0','1','2','3','4','5',0x60,'@',':','2'
	};
	
	private final byte[] csn_end={0x4E,0x39,0x39,0x39,0x39,0x30,0x31,0x30,0x31,0x36,0x49,0x74,0x31,0x30};
	
	private final byte[] csn_set_10={0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e};
	private final byte[] csn_set_25={0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,0x0a,0x1b,0x2c,0x3d,0x4e};
	private final byte[] csn_set_100 = {0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e};
	private final byte[] csn_set_101 = {0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,
			0x0a,0x1b,0x2c,0x3d,0x4e,0x5f,0x6d,0x7a,(byte) 0x8f,(byte) 0x9e,(byte) 0xff};
	
	private final byte[] setFF02 = ISOUtils.hex2byte("FF02");
	private final byte[] getFF01 = ISOUtils.hex2byte("FF01");
	private final byte[][] lenths = {ksn_1_num,ksn_40_num,ksn_80_num,ksn_1_xw,ksn_80_xw,ksn_1_num_xw,ksn_80_num_xw};
	private final byte[][] errTest = {ksn_81_num,ksn_81_xw,ksn_81_num_xw};
	private final byte[][] mixs = {ksn_1_mix,ksn_40_mix};
	private final byte[][] csn_mix = {csn_set_10,csn_set_25,csn_set_100,csn_set_101};
	private Gui gui = new Gui(myactivity, handler);
	
	
	public void systemversion5() 
	{
		if(GlobalVariable.gAutoFlag == ParaEnum.AutoFlag.AutoHand)
			return;
		/*private & local definition*/
		K21DeviceResponse Resp;
		K21ControllerManager k21ControllerManager  = K21ControllerManager.getInstance(myactivity);;
		byte[] k21_pack=null;
		byte[] k21_response;
		byte[] k21_code = new byte[2];
		
		/*process body*/
		gui.cls_show_msg1(1, "%s测试ksn、csn的设置长度", TESTITEM);
		// 测试前置连接K21端
		try 
		{
			k21ControllerManager.connect();
		} catch (ControllerException e) {
			e.printStackTrace();
			gui.cls_show_msg1(gKeepTimeErr, "line %d:连接K21端失败", Tools.getLineInfo());
			return;
		}
		// case1:ksn设置内容为0-9，a-f范围，最长设置内容为80，分别设置1,80,81测试长度,1,80应设置成功，81设置失败
		// case1.1:ksn设置内容全为0-9，分别设置1,80,81测试长度
		// case1.2:ksn设置内容全为a-f或A-F，分别设置1,80,81测试长度
		// case1.3:ksn设置内容权威0-9,a-f,A-F范围，分别设置1,80,81范围
		// 先进行正常测试
		byte[] ksn_mode = {0x10};
		for (int i = 0; i < lenths.length; i++) 
		{
			k21_pack = CalDataLrc.setProCmd(setFF02,ksn_mode,lenths[i]);
			Resp = k21ControllerManager.sendCmd(new K21DeviceCommand(k21_pack), null);
			if(Resp.getInvokeResult()==CommandInvokeResult.SUCCESS)
			{
				// 设置的时候超过80字节应报错，返回30 36
				if(Resp.getResponse()[7] == 0x30 && Resp.getResponse()[8] == 0x30)
						continue;
				else
				{
					System.arraycopy(Resp.getResponse(), 7, k21_code, 0, 2);
					gui.cls_show_msg1_record(fileName, "systemversion5", gKeepTimeErr,"line %d:%s测试失败（%s,len=%d）", Tools.getLineInfo(),TESTITEM,ISOUtils.hexString(k21_code),lenths[i].length);
					if(!GlobalVariable.isContinue)
						return;
				}
			}
		}
		
		// 异常测试
		for (int i = 0; i < errTest.length; i++) 
		{
			k21_pack = CalDataLrc.setProCmd(setFF02,ksn_mode,errTest[i]);
			// 设置的时候超过80字节应报错，返回30 36
			Resp = k21ControllerManager.sendCmd(new K21DeviceCommand(k21_pack), null);
			if(Resp.getInvokeResult()==CommandInvokeResult.SUCCESS)
			{
				// 设置的时候超过80字节应报错，返回30 36
				if(Resp.getResponse()[7] == 0x30 && Resp.getResponse()[8] == 0x36)
				{}
				else
				{
					System.arraycopy(Resp.getResponse(), 7, k21_code, 0, 2);
					gui.cls_show_msg1_record(fileName, "systemversion5", gKeepTimeErr,"line %d:%s测试失败（%s,len=81）", Tools.getLineInfo(),TESTITEM,ISOUtils.hexString(k21_code));
					if(!GlobalVariable.isContinue)
						return;
				}
			}
			// 设置ksn失败后获取ksn的长度应和之前设置成功的值一致
			k21_pack = CalDataLrc.setProCmd(getFF01,ksn_mode, new byte[]{});
			Resp = k21ControllerManager.sendCmd(new K21DeviceCommand(k21_pack), null);
			if(Resp.getInvokeResult()==CommandInvokeResult.SUCCESS)
			{
				k21_response = Arrays.copyOfRange(Resp.getResponse(), 12, Resp.getResponse().length);
				if(!Tools.memcmp(ksn_get_num_80, k21_response, ksn_get_num_80.length))
				{
					gui.cls_show_msg1_record(fileName, "systemversion5", gKeepTimeErr,"line %d:%sksn号比较失败(实际：%s)", Tools.getLineInfo(),TESTITEM,ISOUtils.hexString(k21_response));
					if(!GlobalVariable.isContinue)
						return;
				}
			}

		}
		
		// case2:ksn设置内容不全为0-9，a-f范围，最长设置为40，分别设置1,40,41测试长度
		// 正常测试，ksn混合长度分别为1,40
		for (int i = 0; i < mixs.length; i++) 
		{
			k21_pack = CalDataLrc.setProCmd(setFF02,ksn_mode,mixs[i]);
			Resp = k21ControllerManager.sendCmd(new K21DeviceCommand(k21_pack), null);
			// 设置的时候超过40字节应报错，返回30 36
			if(Resp.getInvokeResult()==CommandInvokeResult.SUCCESS)
			{
				// 设置的时候超过80字节应报错，返回30 36
				if(Resp.getResponse()[7] == 0x30 && Resp.getResponse()[8] == 0x30)
				{}
				else
				{
					System.arraycopy(Resp.getResponse(), 7, k21_code, 0, 2);
					gui.cls_show_msg1_record(fileName, "systemversion5", gKeepTimeErr,"line %d:%s测试失败(%s,len=%d)", Tools.getLineInfo(),TESTITEM,ISOUtils.hexString(k21_code),mixs[i].length);
					if(!GlobalVariable.isContinue)
						return;
				}
			}
			// 获取ksn值进行比较
			k21_pack = CalDataLrc.setProCmd(getFF01,ksn_mode, new byte[]{});
			Resp = k21ControllerManager.sendCmd(new K21DeviceCommand(k21_pack), null);
			if(Resp.getInvokeResult()==CommandInvokeResult.SUCCESS)
			{
				k21_response = Arrays.copyOfRange(Resp.getResponse(), 12, Resp.getResponse().length);
				if(!Tools.memcmp(mixs[i], k21_response, mixs[i].length))
				{
					gui.cls_show_msg1_record(fileName, "systemversion5", gKeepTimeErr,"line %d:%sksn号比较失败(预期:%s)", Tools.getLineInfo(),TESTITEM,ISOUtils.hexString(mixs[i]));
					if(!GlobalVariable.isContinue)
						return;
				}
			}
		}
		
		// 异常测试，长度为41
		k21_pack = CalDataLrc.setProCmd(setFF02,ksn_mode,ksn_41_mix);
		Resp = k21ControllerManager.sendCmd(new K21DeviceCommand(k21_pack), null);
		if(Resp.getInvokeResult()==CommandInvokeResult.SUCCESS)
		{
			// 设置的时候超过80字节应报错，返回30 36
			if(Resp.getResponse()[7] == 0x30 && Resp.getResponse()[8] == 0x36)
			{
				// 设置ksn失败后获取ksn的长度应和之前设置成功的值一致
				k21_pack = CalDataLrc.setProCmd(getFF01,ksn_mode, new byte[]{});
				Resp = k21ControllerManager.sendCmd(new K21DeviceCommand(k21_pack), null);
				if(Resp.getInvokeResult()==CommandInvokeResult.SUCCESS)
				{
					k21_response = Arrays.copyOfRange(Resp.getResponse(), 12, Resp.getResponse().length);
					if(!Tools.memcmp(ksn_40_mix, k21_response, ksn_40_mix.length))
					{
						gui.cls_show_msg1_record(fileName, "systemversion5", gKeepTimeErr,"line %d:%sksn号比较失败(实际:%s,len=40)", Tools.getLineInfo(),TESTITEM,ISOUtils.hexString(k21_response));
						if(!GlobalVariable.isContinue)
							return;
					}
				}
			}
			else
			{
				System.arraycopy(Resp.getResponse(), 7, k21_code, 0, 2);
				gui.cls_show_msg1_record(fileName, "systemversion5", gKeepTimeErr,"line %d:%s测试失败（%s,len=41）", Tools.getLineInfo(),TESTITEM,ISOUtils.hexString(k21_code));
				if(!GlobalVariable.isContinue)
					return;
			}
		}

		
		// 设置csn号
		byte[] csn_mode = {0x04};
		// case3.1：设置csn号为20,25,100字节长度应无问题，获取csn最大返回24字节
		// case3.2:设置csn号为101字节时，应报错
		for (int i = 0; i < csn_mix.length; i++) 
		{
			k21_pack = CalDataLrc.setProCmd(setFF02,csn_mode,csn_mix[i]);
			Resp = k21ControllerManager.sendCmd(new K21DeviceCommand(k21_pack), null);
			// 设置的时候超过100字节应报错，返回30 33
			if(csn_mix[i].length==101)
			{
				if(Resp.getResponse()[7] == 0x30 && Resp.getResponse()[8] == 0x33)
				{
					continue;
				}
				else
				{
					System.arraycopy(Resp.getResponse(), 7, k21_code, 0, 2);
					gui.cls_show_msg1_record(fileName, "systemversion5", gKeepTimeErr,"line %d:%s测试失败（%s,len =%d）", Tools.getLineInfo(),TESTITEM,ISOUtils.hexString(k21_code),csn_mix[i].length);
					if(!GlobalVariable.isContinue)
						return;
				}
			}
			else if(csn_mix[i].length<=100)
			{
				if(Resp.getResponse()[7] == 0x30 && Resp.getResponse()[8] == 0x33)
				{
					System.arraycopy(Resp.getResponse(), 7, k21_code, 0, 2);
					gui.cls_show_msg1_record(fileName, "systemversion5", gKeepTimeErr,"line %d:%s测试失败（%s,len = %d）", Tools.getLineInfo(),TESTITEM,ISOUtils.hexString(k21_code),csn_mix[i].length);
					if(!GlobalVariable.isContinue)
						return;
				}
				// 使用F1 01获取csn长度只截取前24字节
				k21_pack = CalDataLrc.setProCmd(getFF01,csn_mode, new byte[]{});
				Resp = k21ControllerManager.sendCmd(new K21DeviceCommand(k21_pack), null);
				LoggerUtil.e("respLen="+Resp.getResponse().length);
				if(Resp.getInvokeResult()==CommandInvokeResult.SUCCESS)
				{
					k21_response = Arrays.copyOfRange(Resp.getResponse(), 12, Resp.getResponse().length);
					if(!Tools.memcmp(csn_mix[i], k21_response, csn_mix[i].length))
					{
						gui.cls_show_msg1_record(fileName, "systemversion5", gKeepTimeErr,"line %d:%scsn号比较失败(预期：%s)", Tools.getLineInfo(),TESTITEM,ISOUtils.hexString(csn_mix[i]));
						if(!GlobalVariable.isContinue)
							return;
					}
				}
			}
		}
		// 据陈阵反馈csn长度会导致K21的新旧连接使用均出现问题，建议修改为正常的csn值 modify by zhengxq 20170412
		if(gui.ShowMessageBox("是否要将csn的长度设置为14个字节".getBytes(), (byte) (BTN_OK|BTN_CANCEL), WAITMAXTIME)==BTN_OK)
		{
			k21_pack = CalDataLrc.setProCmd(setFF02,csn_mode,csn_end);
			Resp = k21ControllerManager.sendCmd(new K21DeviceCommand(k21_pack), null);
			gui.cls_show_msg1_record(fileName, "systemversion5", gKeepTimeErr,"%s测试通过，目前csn的长度设置为14字节",TESTITEM);
		}
		else
		{
			gui.cls_show_msg1_record(fileName, "systemversion5", gScreenTime,"%s测试通过，目前csn的长度设置为100，使用SystemVersion2查看应只能查看到24字节csn长度", TESTITEM);
		}
		k21ControllerManager.close();
		gui = null;
	}

	@Override
	public void onTestUp() {
		
	}

	@Override
	public void onTestDown() {
		
	}
}
